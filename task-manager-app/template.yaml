AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # SNS Topics should be defined first since they're referenced by multiple functions
  TasksAssignmentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksAssignmentNotificationTopic

  TasksDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksDeadlineNotificationTopic

  ClosedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ClosedTasksNotificationTopic

  ReopenedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ReopenedTasksNotificationTopic

  TasksCompleteNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksCompleteNotificationTopic

  # Cognito Resources
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: role
          AttributeDataType: String
          Mutable: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH

  # DynamoDB Table
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TasksTable
      AttributeDefinitions:
        - AttributeName: TaskId
          AttributeType: S
      KeySchema:
        - AttributeName: TaskId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyApi
      StageName: prod
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Lambda Functions
  DeadlineCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deadline_check.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          EXPIRED_TASKS_QUEUE_URL: !Ref ExpiredTasksQueue
          CLOSED_TASKS_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref TasksTable
      - SQSSendMessagePolicy:
          QueueName: !GetAtt ExpiredTasksQueue.QueueName
      - Statement:
          Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref ClosedTasksNotificationTopic
      - Statement:
          Effect: Allow
          Action:
            - events:DeleteRule
            - events:RemoveTargets
          Resource: "*"


    # Separate IAM role for TaskDeadlineNotificationFunction
  TaskDeadlineNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TaskDeadlineNotificationFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt TasksTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TasksDeadlineNotificationTopic
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:DeleteRule
                  - events:RemoveTargets
                Resource: "*"
              # Add new permission for Lambda:AddPermission
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                Resource: !GetAtt DeadlineCheckFunction.Arn

  # Modified TaskDeadlineNotificationFunction
  TaskDeadlineNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deadline_warning.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Role: !GetAtt TaskDeadlineNotificationFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          TASKS_DEADLINE_TOPIC_ARN: !Ref TasksDeadlineNotificationTopic
          EXPIRED_TASKS_QUEUE_URL: !Ref ExpiredTasksQueue
          DEADLINE_CHECK_FUNCTION_ARN: !GetAtt DeadlineCheckFunction.Arn
          DEADLINE_CHECK_FUNCTION_NAME: !Ref DeadlineCheckFunction
          AWS_ACCOUNT_ID: !Ref AWS::AccountId

          
  AssignTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: assign_task.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Environment:
        Variables:
          TASKS_ASSIGNMENT_TOPIC_ARN: !Ref TasksAssignmentNotificationTopic
          TASKS_DEADLINE_TOPIC_ARN: !Ref TasksDeadlineNotificationTopic
          TASKS_DEADLINE_FUNCTION_NAME: !Ref TaskDeadlineNotificationFunction
          TASKS_DEADLINE_FUNCTION_ARN: !GetAtt TaskDeadlineNotificationFunction.Arn

          TABLE_NAME: !Ref TasksTable
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - events:PutRule
              - events:PutTargets
              - lambda:AddPermission
            Resource: 
              - !GetAtt TasksAssignmentNotificationTopic.TopicArn
              - !GetAtt TasksDeadlineNotificationTopic.TopicArn
              - !GetAtt TaskDeadlineNotificationFunction.Arn
              - "*"  # For EventBridge permissions
      Events:
        AssignTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId: !Ref ApiGateway

  AddUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: add_user.lambda_handler
      Runtime: python3.11
      CodeUri: functions/users/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          TASKS_ASSIGNMENT_TOPIC_ARN: !Ref TasksAssignmentNotificationTopic
          TASKS_DEADLINE_TOPIC_ARN: !Ref TasksDeadlineNotificationTopic
          CLOSED_TASKS_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
          REOPENED_TASKS_TOPIC_ARN: !Ref ReopenedTasksNotificationTopic
          TASKS_COMPLETED_TOPIC_ARN: !Ref TasksCompleteNotificationTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action: 
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminAddUserToGroup
              - sns:Subscribe
              - sns:Publish
            Resource: 
              - !GetAtt CognitoUserPool.Arn
              - !GetAtt TasksAssignmentNotificationTopic.TopicArn
              - !GetAtt TasksDeadlineNotificationTopic.TopicArn
              - !GetAtt ClosedTasksNotificationTopic.TopicArn
              - !GetAtt ReopenedTasksNotificationTopic.TopicArn
      Events:
        AddUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ApiGateway

  GetUserTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_user_tasks.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetUserTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref ApiGateway

  EditTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: edit_task.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          TASKS_ASSIGNMENT_TOPIC_ARN: !Ref TasksAssignmentNotificationTopic
          REOPENED_TASKS_TOPIC_ARN: !Ref ReopenedTasksNotificationTopic
          TASKS_COMPLETE_TOPIC_ARN: !Ref TasksCompleteNotificationTopic
          TASKS_DEADLINE_FUNCTION_NAME: !Ref TaskDeadlineNotificationFunction
          TASKS_DEADLINE_FUNCTION_ARN: !GetAtt TaskDeadlineNotificationFunction.Arn
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref TasksAssignmentNotificationTopic
              - !Ref ReopenedTasksNotificationTopic
              - !Ref TasksCompleteNotificationTopic
        - Statement:
            Effect: Allow
            Action:
              - events:PutRule
              - events:PutTargets
              - events:DeleteRule
              - events:RemoveTargets
            Resource: "*"
        - Statement:
            Effect: Allow
            Action:
              - lambda:AddPermission
            Resource: "*"
      Events:
        EditTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: put
            RestApiId: !Ref ApiGateway

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_task.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        DeleteTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: delete
            RestApiId: !Ref ApiGateway

  GetAllTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_all_tasks.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetAllTasks:
          Type: Api
          Properties:
            Path: /tasks/all
            Method: get
            RestApiId: !Ref ApiGateway

  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_all_users.lambda_handler
      Runtime: python3.11
      CodeUri: functions/users/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt CognitoUserPool.Arn
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref ApiGateway
            
  TestApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: testapi.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        GetAllTasks:
          Type: Api
          Properties:
            Path: /tasks/test
            Method: get
            RestApiId: !Ref ApiGateway

   # Add SQS Queue for expired tasks
  ExpiredTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ExpiredTasksQueue
      VisibilityTimeout: 300  # 5 minutes

  # Step Function for handling expired tasks
  ExpiredTasksStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/expired_tasks.asl.json
      DefinitionSubstitutions:
        DDBTableName: !Ref TasksTable
        SNSTopicArn: !Ref ClosedTasksNotificationTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ClosedTasksNotificationTopic.TopicName
        - SQSPollerPolicy:
            QueueName: !GetAtt ExpiredTasksQueue.QueueName

  # Lambda function to process expired tasks
  ProcessExpiredTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process_expired_task.lambda_handler
      Runtime: python3.11
      CodeUri: functions/tasks/
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          CLOSED_TASKS_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
          STEP_FUNCTION_ARN: !Ref ExpiredTasksStateMachine
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt ExpiredTasksStateMachine.Name
      Events:
        ExpiredTasksQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ExpiredTasksQueue.Arn
            BatchSize: 1
